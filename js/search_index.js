var search_data = {"index":{"searchIndex":["dmamp","mod","opts","pattern","build()","instance()","new()","new()","new()","options()","pattern()","changelog"],"longSearchIndex":["dmamp","dmamp::mod","dmamp::opts","dmamp::pattern","dmamp::mod#build()","dmamp::pattern::instance()","dmamp::mod::new()","dmamp::opts::new()","dmamp::pattern::new()","dmamp::options()","dmamp::pattern()",""],"info":[["DMAMP","","DMAMP.html","","<p>Dun Me A Module Please puppet module templater\n"],["DMAMP::Mod","","DMAMP/Mod.html","","<p>Umbrella class that gets the pattern and builds upon instantiation.\n"],["DMAMP::Opts","","DMAMP/Opts.html","","<p>Option parsing class, all options available via the options accessor.\n"],["DMAMP::Pattern","","DMAMP/Pattern.html","","<p>Helper for loading the appropriate metadata for the  given pattern by\nreading from the appropriate directories …\n"],["build","DMAMP::Mod","DMAMP/Mod.html#method-i-build","()","<p>Tests whether module directory exists, then  writes in files from template\nreplacing placeholder variables …\n"],["instance","DMAMP::Pattern","DMAMP/Pattern.html#method-c-instance","(name)","<p>Return the instance of Pattern if it exists, else instantiate it\n"],["new","DMAMP::Mod","DMAMP/Mod.html#method-c-new","(options)","<p>Instatiates, gathers pattern metadata and then calls self.build to create\nthe new module. <code>options</code> - optparser …\n"],["new","DMAMP::Opts","DMAMP/Opts.html#method-c-new","()","<p>Parses options from ARGV\n"],["new","DMAMP::Pattern","DMAMP/Pattern.html#method-c-new","(name)","<p>Instantiate pattern class and acquire metadata for pattern from the\nappropriate pattern’s template directory. …\n"],["options","DMAMP","DMAMP.html#method-c-options","()","<p>Create and return option hash from DMAMP::Opts\n"],["pattern","DMAMP","DMAMP.html#method-c-pattern","(name)","<p>Pretty much just a module level alias for Pattern.instance\n"],["CHANGELOG","","CHANGELOG.html","","<p>v0.1.0. Has templating, only does manifests\n"]]}}